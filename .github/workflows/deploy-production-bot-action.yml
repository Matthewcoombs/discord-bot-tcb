name: Deploy Discord Bot
run-name: ${{ github.actor }} is updating the production discord bot
on:
  push:
    branches: [master]
env:
  REPO_NAME: ${{ github.event.repository.name }}
jobs:
  # Clearing the project from the root directory to copy fresh files
  clear-project:
    runs-on: ubuntu-latest
    timeout-minutes: 2
    steps:
      - id: clear-project
        uses: fifsky/ssh-action@master
        with:
          command: |
            cd /root
            rm -rf ${{ env.REPO_NAME }}
            echo $?
          host: ${{ secrets.SSH_HOST }}
          user: root
          pass: ${{ secrets.SSH_PASSWORD }}

  # Copying the copy project via sftp into the remote server
  deploy-via-sftp:
    needs: [clear-project]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - id: SFTPDeploy
        uses: Creepios/sftp-action@v1.0.3
        with:
          username: root
          host: ${{ secrets.SSH_HOST }}
          port: 22
          password: ${{ secrets.SSH_PASSWORD }}
          localPath: '.'
          remotePath: /root/${{ env.REPO_NAME }}

  # Creating systemctl service to compile the project
  build-step:
    needs: [deploy-via-sftp]
    runs-on: ubuntu-latest
    timeout-minutes: 2
    steps:
      - id: build-step
        uses: fifsky/ssh-action@master
        with:
          command: |
            export NVM_DIR=~/.nvm
            source ~/.nvm/nvm.sh
            cd /root/${{ env.REPO_NAME }}
            rm -rf dist
            /root/.local/share/pnpm/pnpm build-prod
            echo $?
          host: ${{ secrets.SSH_HOST }}
          user: root
          pass: ${{ secrets.SSH_PASSWORD }}

  # Creating systemctl service to clear the current bot commands
  create-systemctl-clear-command-service:
    needs: [build-step]
    runs-on: ubuntu-latest
    steps:
      - id: create-systemctl-command-service
        uses: fifsky/ssh-action@master
        with:
          command: |
            echo "[Unit]
            Description=Production Discord Bot Clear Commands
            After=multi.user.target
            [Service]
            Type=oneshot
            Environment=OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}
            Environment=CLAUDE_API_KEY=${{ secrets.CLAUDE_API_KEY }}
            Environment=DISCORD_TOKEN=${{ secrets.DISCORD_TOKEN }}
            Environment=CLIENT_ID=${{ secrets.CLIENT_ID }}
            WorkingDirectory=/root/${{ env.REPO_NAME }}
            ExecStart=/root/.nvm/versions/node/v20.4.0/bin/node scripts/delete-commands.js
            User=root
            Group=root
            [Install]
            WantedBy=multi-user.target" > /etc/systemd/system/clear-bot-commands.service
            chmod +x /root/${{ env.REPO_NAME }}/scripts/delete-commands.js
            sudo systemctl enable clear-bot-commands.service
            sudo systemctl daemon-reload
            sudo systemctl restart clear-bot-commands.service
            echo $?
          host: ${{ secrets.SSH_HOST }}
          user: root
          pass: ${{ secrets.SSH_PASSWORD }}

  # Creating systemctl service to deploy the bot commands
  create-systemctl-deploy-command-service:
    needs: [create-systemctl-clear-command-service]
    runs-on: ubuntu-latest
    steps:
      - id: create-systemctl-command-service
        uses: fifsky/ssh-action@master
        with:
          command: |
            echo "[Unit]
            Description=Production Discord Bot Deploy Commands
            After=multi.user.target
            [Service]
            Type=oneshot
            Environment=OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}
            Environment=CLAUDE_API_KEY=${{ secrets.CLAUDE_API_KEY }}
            Environment=DISCORD_TOKEN=${{ secrets.DISCORD_TOKEN }}
            Environment=CLIENT_ID=${{ secrets.CLIENT_ID }}
            WorkingDirectory=/root/${{ env.REPO_NAME }}
            ExecStart=/root/.nvm/versions/node/v20.4.0/bin/node scripts/deploy-commands.js
            User=root
            Group=root
            [Install]
            WantedBy=multi-user.target" > /etc/systemd/system/update-bot-commands.service
            chmod +x /root/${{ env.REPO_NAME }}/scripts/deploy-commands.js
            sudo systemctl enable update-bot-commands.service
            sudo systemctl daemon-reload
            sudo systemctl restart update-bot-commands.service
            echo $?
          host: ${{ secrets.SSH_HOST }}
          user: root
          pass: ${{ secrets.SSH_PASSWORD }}

  # Creating systemctl service to start the bot
  create-systemctl-service:
    needs: [create-systemctl-deploy-command-service]
    runs-on: ubuntu-latest
    steps:
      - id: create-systemctl-service
        uses: fifsky/ssh-action@master
        with:
          command: |
            echo "[Unit]
            Description=Production Discord Bot
            After=multi.user.target
            [Service]
            Type=simple
            Environment=DISCORD_TOKEN=${{ secrets.DISCORD_TOKEN }}
            Environment=CLIENT_ID=${{ secrets.CLIENT_ID }}
            Environment=OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}
            Environment=CLAUDE_API_KEY=${{ secrets.CLAUDE_API_KEY }}
            Environment=POSTGRES_HOSTNAME=${{ secrets.POSTGRES_HOSTNAME }}
            Environment=POSTGRES_USERNAME=${{ secrets.POSTGRES_USERNAME }}
            Environment=POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
            Environment=POSTGRES_DATABASE=${{ secrets.POSTGRES_DATABASE }}
            Environment=EMAIL_ADDRESS=${{ secrets.EMAIL_ADDRESS }}
            Environment=EMAIL_PASSWORD=${{ secrets.EMAIL_PASSWORD }}
            WorkingDirectory=/root
            ExecStart=/root/.nvm/versions/node/v20.4.0/bin/node ${{ env.REPO_NAME }}/dist/index.js
            User=root
            Group=root
            Restart=on-failure
            RestartSec=30
            [Install]
            WantedBy=multi-user.target" > /etc/systemd/system/start-bot.service
            chmod +x /root/${{ env.REPO_NAME }}/dist/index.js
            sudo systemctl enable start-bot.service
            sudo systemctl daemon-reload
            sudo systemctl restart start-bot.service
            echo $?
          host: ${{ secrets.SSH_HOST }}
          user: root
          pass: ${{ secrets.SSH_PASSWORD }}

  bumping-package-version:
    needs: [create-systemctl-service]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: ‚è´ Bumping version
        uses: jpb06/bump-package@latest
        with:
          major-keywords: major
          minor-keywords: feature,minor,refactor
          patch-keywords: fix,chore,bug-fix
